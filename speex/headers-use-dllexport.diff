--- a/include/speex/speex.h	2015-07-06 23:02:11.000000000 +0800
+++ b/include/speex/speex.h	2019-11-08 18:58:40.124497600 +0800
@@ -40,6 +40,16 @@
  *  @{
  */
 
+#if defined (SPEEX_STATIC) || !defined (_WIN32)
+# define EXPORT
+#else
+# ifdef BUILDING_LIBSPEEX
+#  define EXPORT __declspec (dllexport) extern
+# else
+#  define EXPORT __declspec (dllimport) extern
+# endif
+#endif
+
 #include "speex_types.h"
 #include "speex_bits.h"
 
@@ -299,10 +309,12 @@
  * @param mode The mode to use (either speex_nb_mode or speex_wb.mode)
  * @return A newly created encoder state or NULL if state allocation fails
  */
+EXPORT
 void *speex_encoder_init(const SpeexMode *mode);
 
 /** Frees all resources associated to an existing Speex encoder state.
  * @param state Encoder state to be destroyed */
+EXPORT
 void speex_encoder_destroy(void *state);
 
 /** Uses an existing encoder state to encode one frame of speech pointed to by
@@ -314,6 +326,7 @@
  @param bits Bit-stream where the data will be written
  @return 0 if frame needs not be transmitted (DTX only), 1 otherwise
  */
+EXPORT
 int speex_encode(void *state, float *in, SpeexBits *bits);
 
 /** Uses an existing encoder state to encode one frame of speech pointed to by
@@ -323,6 +336,7 @@
  @param bits Bit-stream where the data will be written
  @return 0 if frame needs not be transmitted (DTX only), 1 otherwise
  */
+EXPORT
 int speex_encode_int(void *state, spx_int16_t *in, SpeexBits *bits);
 
 /** Used like the ioctl function to control the encoder parameters
@@ -332,6 +346,7 @@
  * @param ptr Data exchanged to-from function
  * @return 0 if no error, -1 if request in unknown, -2 for invalid parameter
  */
+EXPORT
 int speex_encoder_ctl(void *state, int request, void *ptr);
 
 
@@ -343,12 +358,14 @@
  * @param mode Speex mode (one of speex_nb_mode or speex_wb_mode)
  * @return A newly created decoder state or NULL if state allocation fails
  */
+EXPORT
 void *speex_decoder_init(const SpeexMode *mode);
 
 /** Frees all resources associated to an existing decoder state.
  *
  * @param state State to be destroyed
  */
+EXPORT
 void speex_decoder_destroy(void *state);
 
 /** Uses an existing decoder state to decode one frame of speech from
@@ -359,6 +376,7 @@
  * @param out Where to write the decoded frame
  * @return return status (0 for no error, -1 for end of stream, -2 corrupt stream)
  */
+EXPORT
 int speex_decode(void *state, SpeexBits *bits, float *out);
 
 /** Uses an existing decoder state to decode one frame of speech from
@@ -369,6 +387,7 @@
  * @param out Where to write the decoded frame
  * @return return status (0 for no error, -1 for end of stream, -2 corrupt stream)
  */
+EXPORT
 int speex_decode_int(void *state, SpeexBits *bits, spx_int16_t *out);
 
 /** Used like the ioctl function to control the encoder parameters
@@ -378,6 +397,7 @@
  * @param ptr Data exchanged to-from function
  * @return 0 if no error, -1 if request in unknown, -2 for invalid parameter
  */
+EXPORT
 int speex_decoder_ctl(void *state, int request, void *ptr);
 
 
@@ -388,6 +408,7 @@
  * @param ptr Data exchanged to-from function
  * @return 0 if no error, -1 if request in unknown, -2 for invalid parameter
  */
+EXPORT
 int speex_mode_query(const SpeexMode *mode, int request, void *ptr);
 
 /** Functions for controlling the behavior of libspeex
@@ -395,21 +416,23 @@
  * @param ptr Data exchanged to-from function
  * @return 0 if no error, -1 if request in unknown, -2 for invalid parameter
  */
+EXPORT
 int speex_lib_ctl(int request, void *ptr);
 
 /** Default narrowband mode */
-extern const SpeexMode speex_nb_mode;
+EXPORT const SpeexMode speex_nb_mode;
 
 /** Default wideband mode */
-extern const SpeexMode speex_wb_mode;
+EXPORT const SpeexMode speex_wb_mode;
 
 /** Default "ultra-wideband" mode */
-extern const SpeexMode speex_uwb_mode;
+EXPORT const SpeexMode speex_uwb_mode;
 
 /** List of all modes available */
-extern const SpeexMode * const speex_mode_list[SPEEX_NB_MODES];
+EXPORT const SpeexMode * const speex_mode_list[SPEEX_NB_MODES];
 
 /** Obtain one of the modes available */
+EXPORT
 const SpeexMode * speex_lib_get_mode (int mode);
 
 #ifndef WIN32
--- a/include/speex/speex_bits.h	2015-07-06 23:02:11.000000000 +0800
+++ b/include/speex/speex_bits.h	2019-11-08 19:36:21.590100000 +0800
@@ -41,6 +41,16 @@
  *  @{
  */
 
+#if defined (SPEEX_STATIC) || !defined (_WIN32)
+# define EXPORT
+#else
+# ifdef BUILDING_LIBSPEEX
+#  define EXPORT __declspec (dllexport) extern
+# else
+#  define EXPORT __declspec (dllimport) extern
+# endif
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -59,24 +69,31 @@
 } SpeexBits;
 
 /** Initializes and allocates resources for a SpeexBits struct */
+EXPORT
 void speex_bits_init(SpeexBits *bits);
 
 /** Initializes SpeexBits struct using a pre-allocated buffer*/
+EXPORT
 void speex_bits_init_buffer(SpeexBits *bits, void *buff, int buf_size);
 
 /** Sets the bits in a SpeexBits struct to use data from an existing buffer (for decoding without copying data) */
+EXPORT
 void speex_bits_set_bit_buffer(SpeexBits *bits, void *buff, int buf_size);
 
 /** Frees all resources associated to a SpeexBits struct. Right now this does nothing since no resources are allocated, but this could change in the future.*/
+EXPORT
 void speex_bits_destroy(SpeexBits *bits);
 
 /** Resets bits to initial value (just after initialization, erasing content)*/
+EXPORT
 void speex_bits_reset(SpeexBits *bits);
 
 /** Rewind the bit-stream to the beginning (ready for read) without erasing the content */
+EXPORT
 void speex_bits_rewind(SpeexBits *bits);
 
 /** Initializes the bit-stream from the data in an area of memory */
+EXPORT
 void speex_bits_read_from(SpeexBits *bits, const char *bytes, int len);
 
 /** Append bytes to the bit-stream
@@ -85,6 +102,7 @@
  * @param bytes pointer to the bytes what will be appended
  * @param len Number of bytes of append
  */
+EXPORT
 void speex_bits_read_whole_bytes(SpeexBits *bits, const char *bytes, int len);
 
 /** Write the content of a bit-stream to an area of memory
@@ -94,9 +112,11 @@
  * @param max_len Maximum number of bytes to write (i.e. size of the "bytes" buffer)
  * @return Number of bytes written to the "bytes" buffer
 */
+EXPORT
 int speex_bits_write(SpeexBits *bits, char *bytes, int max_len);
 
 /** Like speex_bits_write, but writes only the complete bytes in the stream. Also removes the written bytes from the stream */
+EXPORT
 int speex_bits_write_whole_bytes(SpeexBits *bits, char *bytes, int max_len);
 
 /** Append bits to the bit-stream
@@ -104,6 +124,7 @@
  * @param data Value to append as integer
  * @param nbBits number of bits to consider in "data"
  */
+EXPORT
 void speex_bits_pack(SpeexBits *bits, int data, int nbBits);
 
 /** Interpret the next bits in the bit-stream as a signed integer
@@ -112,6 +133,7 @@
  * @param nbBits Number of bits to interpret
  * @return A signed integer represented by the bits read
  */
+EXPORT
 int speex_bits_unpack_signed(SpeexBits *bits, int nbBits);
 
 /** Interpret the next bits in the bit-stream as an unsigned integer
@@ -120,6 +142,7 @@
  * @param nbBits Number of bits to interpret
  * @return An unsigned integer represented by the bits read
  */
+EXPORT
 unsigned int speex_bits_unpack_unsigned(SpeexBits *bits, int nbBits);
 
 /** Returns the number of bytes in the bit-stream, including the last one even if it is not "full"
@@ -127,6 +150,7 @@
  * @param bits Bit-stream to operate on
  * @return Number of bytes in the stream
  */
+EXPORT
 int speex_bits_nbytes(SpeexBits *bits);
 
 /** Same as speex_bits_unpack_unsigned, but without modifying the cursor position
@@ -135,6 +159,7 @@
  * @param nbBits Number of bits to look for
  * @return Value of the bits peeked, interpreted as unsigned
  */
+EXPORT
 unsigned int speex_bits_peek_unsigned(SpeexBits *bits, int nbBits);
 
 /** Get the value of the next bit in the stream, without modifying the
@@ -143,6 +168,7 @@
  * @param bits Bit-stream to operate on
  * @return Value of the bit peeked (one bit only)
  */
+EXPORT
 int speex_bits_peek(SpeexBits *bits);
 
 /** Advances the position of the "bit cursor" in the stream
@@ -150,6 +176,7 @@
  * @param bits Bit-stream to operate on
  * @param n Number of bits to advance
  */
+EXPORT
 void speex_bits_advance(SpeexBits *bits, int n);
 
 /** Returns the number of bits remaining to be read in a stream
@@ -157,6 +184,7 @@
  * @param bits Bit-stream to operate on
  * @return Number of bits that can still be read from the stream
  */
+EXPORT
 int speex_bits_remaining(SpeexBits *bits);
 
 /** Insert a terminator so that the data can be sent as a packet while auto-detecting
@@ -164,6 +192,7 @@
  *
  * @param bits Bit-stream to operate on
  */
+EXPORT
 void speex_bits_insert_terminator(SpeexBits *bits);
 
 #ifdef __cplusplus
--- a/include/speex/speex_callbacks.h	2015-07-06 23:02:11.000000000 +0800
+++ b/include/speex/speex_callbacks.h	2019-11-08 10:29:23.068411900 +0800
@@ -97,32 +97,41 @@
 } SpeexCallback;
 
 /** Handle in-band request */
+EXPORT
 int speex_inband_handler(SpeexBits *bits, SpeexCallback *callback_list, void *state);
 
 /** Standard handler for mode request (change mode, no questions asked) */
+EXPORT
 int speex_std_mode_request_handler(SpeexBits *bits, void *state, void *data);
 
 /** Standard handler for high mode request (change high mode, no questions asked) */
+EXPORT
 int speex_std_high_mode_request_handler(SpeexBits *bits, void *state, void *data);
 
 /** Standard handler for in-band characters (write to stderr) */
+EXPORT
 int speex_std_char_handler(SpeexBits *bits, void *state, void *data);
 
 /** Default handler for user-defined requests: in this case, just ignore */
+EXPORT
 int speex_default_user_handler(SpeexBits *bits, void *state, void *data);
 
 
 
 /** Standard handler for low mode request (change low mode, no questions asked) */
+EXPORT
 int speex_std_low_mode_request_handler(SpeexBits *bits, void *state, void *data);
 
 /** Standard handler for VBR request (Set VBR, no questions asked) */
+EXPORT
 int speex_std_vbr_request_handler(SpeexBits *bits, void *state, void *data);
 
 /** Standard handler for enhancer request (Turn enhancer on/off, no questions asked) */
+EXPORT
 int speex_std_enh_request_handler(SpeexBits *bits, void *state, void *data);
 
 /** Standard handler for VBR quality request (Set VBR quality, no questions asked) */
+EXPORT
 int speex_std_vbr_quality_request_handler(SpeexBits *bits, void *state, void *data);
 
 
--- a/include/speex/speex_header.h	2015-07-06 23:02:11.000000000 +0800
+++ b/include/speex/speex_header.h	2019-11-08 18:59:15.232802900 +0800
@@ -43,6 +43,16 @@
 
 #include "speex_types.h"
 
+#if defined (SPEEX_STATIC) || !defined (_WIN32)
+# define EXPORT
+#else
+# ifdef BUILDING_LIBSPEEX
+#  define EXPORT __declspec (dllexport) extern
+# else
+#  define EXPORT __declspec (dllimport) extern
+# endif
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -75,15 +85,19 @@
 } SpeexHeader;
 
 /** Initializes a SpeexHeader using basic information */
+EXPORT
 void speex_init_header(SpeexHeader *header, int rate, int nb_channels, const struct SpeexMode *m);
 
 /** Creates the header packet from the header itself (mostly involves endianness conversion) */
+EXPORT
 char *speex_header_to_packet(SpeexHeader *header, int *size);
 
 /** Creates a SpeexHeader from a packet */
+EXPORT
 SpeexHeader *speex_packet_to_header(char *packet, int size);
 
 /** Frees the memory allocated by either speex_header_to_packet() or speex_packet_to_header() */
+EXPORT
 void speex_header_free(void *ptr);
 
 #ifdef __cplusplus
--- a/include/speex/speex_stereo.h	2015-07-06 23:02:11.000000000 +0800
+++ b/include/speex/speex_stereo.h	2019-11-08 10:29:06.337659900 +0800
@@ -61,27 +61,35 @@
 #define SPEEX_STEREO_STATE_INIT {1,.5,1,1,0,0}
 
 /** Initialise/create a stereo stereo state */
+EXPORT
 SpeexStereoState *speex_stereo_state_init();
 
 /** Reset/re-initialise an already allocated stereo state */
+EXPORT
 void speex_stereo_state_reset(SpeexStereoState *stereo);
 
 /** Destroy a stereo stereo state */
+EXPORT
 void speex_stereo_state_destroy(SpeexStereoState *stereo);
 
 /** Transforms a stereo frame into a mono frame and stores intensity stereo info in 'bits' */
+EXPORT
 void speex_encode_stereo(float *data, int frame_size, SpeexBits *bits);
 
 /** Transforms a stereo frame into a mono frame and stores intensity stereo info in 'bits' */
+EXPORT
 void speex_encode_stereo_int(spx_int16_t *data, int frame_size, SpeexBits *bits);
 
 /** Transforms a mono frame into a stereo frame using intensity stereo info */
+EXPORT
 void speex_decode_stereo(float *data, int frame_size, SpeexStereoState *stereo);
 
 /** Transforms a mono frame into a stereo frame using intensity stereo info */
+EXPORT
 void speex_decode_stereo_int(spx_int16_t *data, int frame_size, SpeexStereoState *stereo);
 
 /** Callback handler for intensity stereo info */
+EXPORT
 int speex_std_stereo_request_handler(SpeexBits *bits, void *state, void *data);
 
 #ifdef __cplusplus
